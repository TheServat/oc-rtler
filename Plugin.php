<?php namespace RtlWeb\RtlSkin;

use Lang;
use Event;
use Config;
use RtlWeb\RtlSkin\Classes\UrlGenerator;
use System\Classes\PluginBase;
use System\Classes\MarkupManager;
use RtlWeb\RtlSkin\Classes\CssFlipper;

/**
 * RtlSkin Plugin Information File
 */
class Plugin extends PluginBase
{

    /**
     * Returns information about this plugin.
     *
     * @return array
     */
    public function pluginDetails()
    {
        return [
            'name' => 'RtlSkin',
            'description' => 'Rtl skin for OctoberCms',
            'author' => 'Sajjad Servatjoo',
            'icon' => 'icon-leaf'
        ];
    }

    public function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub
    }

    public function register()
    {
        Config::set('cms.backendSkin', 'RtlWeb\RtlSkin\Skins\RtlSkin');
        $this->registerMarkupTags();
        $this->registerUrlGenerator();
    }

    protected function registerUrlGenerator()
    {
        $this->app['url'] = $this->app->share(function ($app) {
            $routes = $app['router']->getRoutes();

            $url = new UrlGenerator(
                $routes, $app->rebinding(
                'request', $this->requestRebinder()
            ));

            $url->setSessionResolver(function () {
                return $this->app['session'];
            });

            // If the route collection is "rebound", for example, when the routes stay
            // cached for the application, we will need to rebind the routes on the
            // URL generator instance so it has the latest version of the routes.
            $app->rebinding('routes', function ($app, $routes) {
                $app['url']->setRoutes($routes);
            });

            return $url;
        });
    }

    protected function requestRebinder()
    {
        return function ($app, $request) {
            $app['url']->setRequest($request);
        };
    }

    /**
     * Registers CMS markup tags introduced by this plugin.
     */
    public function registerMarkupTags()
    {
        MarkupManager::instance()->registerCallback(function ($manager) {
            $manager->registerFilters([
                // Classes
                'flipCss' => [$this, 'flipCss'],
            ]);
        });
    }


    /**
     * Twig Markup tag 'flipCss'
     * @param $paths
     * @param bool $force
     * @return array|string
     */
    public function flipCss($paths, $force = false)
    {
        if (trans('system::lang.direction') != 'rtl' && $force == false) {
            return $paths;
        }
        if (!is_array($paths)) {
            return CssFlipper::flipCss($paths, true);
        }
        $rPaths = [];
        foreach ($paths as $path) {
            $rPaths[] = CssFlipper::flipCss($path, true);
        }
        return $rPaths;
    }
}
